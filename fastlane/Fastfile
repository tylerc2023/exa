before_all do
    ensure_git_branch
    # ensure_git_status_clean
    git_pull
end

timestamp = (Time.now.to_f * 1000).to_i

platform :ios do

    lane :beta do
      increment_build_number(xcodeproj: './ios/core.xcodeproj')
      commit_version_bump(message: 'chore: bump build')
      add_git_tag
      push_to_git_remote

      sync_code_signing(type: "appstore")
      build_app(scheme: "core")
      changelog_from_git_commits

      upload_to_testflight
    end

    lane :release do
      increment_version_number(xcodeproj: './ios/core.xcodeproj', bump_type: 'patch')

      increment_build_number(xcodeproj: './ios/core.xcodeproj')
      commit_version_bump(message: 'chore: bump build')
      add_git_tag
      push_to_git_remote

      get_push_certificate
      capture_screenshot    

      sync_code_signing(type: "appstore")
      build_app(scheme: "core")
      changelog_from_git_commits

      upload_to_app_store
    end
end

platform :android do
    lane :beta do
        android_set_version_name(version_name: timestamp.to_s, gradle_file: "android/app/build.gradle")
        android_set_version_code(version_code: timestamp, gradle_file: "android/app/build.gradle")
        git_commit(path: "*", message: 'chore: bump android version')
        push_to_git_remote

        changelog_from_git_commits
        gradle(task: 'assemble', build_type: 'Release', project_dir: './android/')
        upload_to_play_store(track: 'beta', skip_upload_apk: true, version_code: timestamp, version_name: timestamp.to_s)
    end 

    lane :release do
        changelog_from_git_commits
        gradle(task: 'assemble', build_type: 'Release', project_dir: './android/')
        upload_to_play_store(skip_upload_apk: true, version_code: timestamp, version_name: timestamp.to_s)
    end
end

lane :codepush_ios do |options|
    current_version = get_version_number(xcodeproj: './ios/core.xcodeproj', target: 'core')
    codepush(current_version: current_version, manditory: options[:manditory])
end

lane :codepush_android do |options|
    current_version = google_play_track_release_names
    codepush(current_version: current_version, manditory: options[:manditory])
end

private_lane :select_app_version do |options|
    current_version = options[:current_version]
    current_major = [current_version.split(".").first, 'x', 'x'].join('.')
    current_minor = current_version.split('.').slice(0,2).push('x').join('.')
    target_version_label = UI.select("What version do you want to target?", [
        "All users",
        "Most recent major (#{current_major})",
        "Most recent minor (#{current_mior})",
        "Current version (#{current_version})"
    ])

    next "\"*\"" if target_version_label.match(/All/)
    next current_major if target_version_label.match(/major/)
    next current_minor if target_version_label.match(/minor/)

    current_version
end

lane :codepush do |options|
    manditory = !!options[:manditory]
    manditory_string = manditory ? " -m" : ""
    version = select_app_version(current_version: options[:current_version])
    if UI.confirm("Going to CodePush #{version} to production. Feeling lucky punk?")
        Dir.chdir("..") do
            sh "appcenter codepush release-react -a core -d Production -t #{version}#{maditory_string} --output-dir ./build" do |status, result, command|
            unless status.success?
                UI.error "Command #{command} failed with status #{status.exitstatus}"
            end
            UI.message "Finished! Check out the release on App center."
        end
        end
    else
        UI.error "Not going to push"
    end
end