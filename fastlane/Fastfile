# fastlane ios|android deploy app:core|progress|journal|accomplish method:prod|test|codepush
# e.g. fastlane ios deploy app:core method:prod
# e.g. fastlane android deploy app:core method:codepush

timestamp = Time.now.to_i

before_all do
  ensure_git_branch
  ensure_git_status_clean
  git_pull
end

platform :ios do

  lane :deploy do |options|
    desc "parse arguments"
    app_name = options[:app]
    method_name = options[:method]
    new_package_name = "com.eneff.app." + app_name.downcase
    abort("missing app: argument") if !app_name
    abort("missing method: argument") if !method_name

    desc "increment version"
    increment_build_number(xcodeproj: "./ios/core.xcodeproj", build_number: timestamp)
    increment_version_number(xcodeproj: "./ios/core.xcodeproj", bump_type: "patch") # TODO: read changelog and update package.json
    git_commit(path: "./ios/*", message: "chore: bump ios version", skip_git_hooks: true)
    push_to_git_remote(no_verify: true)

    desc "clone configs"
    sh("cp", "../ios/core/GoogleService-Info." + app_name.downcase + ".plist", "../ios/core/GoogleService-Info.plist")
    update_info_plist(xcodeproj: "./ios/core.xcodeproj", scheme: "core", display_name: app_name, app_identifier: new_package_name)
    sh("sed -i '' 's/com.eneff.app.core/#{new_package_name}/g' ../ios/core.xcodeproj/project.pbxproj")

    desc "build ipa"
    get_push_certificate(app_identifier: new_package_name)
    match(app_identifier: new_package_name)
    build_app(scheme: "core", workspace:"./ios/core.xcworkspace")

    desc "clean configs"
    sh("cp", "../ios/core/GoogleService-Info.core.plist", "../ios/core/GoogleService-Info.plist")
    update_info_plist(xcodeproj: "./ios/core.xcodeproj", scheme: "core", display_name: 'Core', app_identifier: "com.eneff.app.core")
    sh("sed -i '' 's/#{new_package_name}/com.eneff.app.core/g' ../ios/core.xcodeproj/project.pbxproj")

    desc "deploy"
    changelog_from_git_commits
    deliver
  end

end

platform :android do

  lane :deploy do |options|
    desc "parse arguments"
    app_name = options[:app]
    method_name = options[:method]
    new_package_name = "com.eneff.app." + app_name.downcase
    abort("missing app: argument") if !app_name
    abort("missing method: argument") if !method_name
 
    desc "increment version"
    android_set_version_name(version_name: timestamp.to_s, gradle_file: "android/app/build.gradle")
    android_set_version_code(version_code: timestamp, gradle_file: "android/app/build.gradle")
    git_commit(path: "./android/*", message: "chore: bump android version to " + timestamp.to_s, skip_git_hooks: true)
    push_to_git_remote(no_verify: true)

    desc "clone configs"
    if new_package_name != "com.eneff.app.core"
      sh("cp", "../android/app/google-services." + app_name.downcase + ".json", "../android/app/google-services.json")
      rename_android_package(path: "./android/", package_name: "com.eneff.app.core", new_package_name: new_package_name)
      update_android_strings( block: lambda { |strings| strings['app_name'] = app_name } )
    end

    desc "build aab"
    changelog_from_git_commits
    gradle(task: "clean", project_dir: "./android/")
    gradle(task: "bundle", build_type: "Release", project_dir: "./android/")

    desc "clean configs"
    if new_package_name != "com.eneff.app.core"
      sh("cp", "../android/app/google-services.core.json", "../android/app/google-services.json")
      sh("rm", "-rf", "../android/app/src/main/java/com/eneff/app/!(core)/*")
      rename_android_package(path: "./android/", package_name: new_package_name, new_package_name: "com.eneff.app.core")
      update_android_strings( block: lambda { |strings| strings['app_name'] = 'Core' } )
    end

    desc "submit to google"
    upload_to_play_store(track: "beta", package_name: new_package_name)
  end

end
