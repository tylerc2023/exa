timestamp = Time.now.to_i

before_all do
  ensure_git_branch
  # ensure_git_status_clean
  git_pull
end

platform :ios do

  lane :beta do
    increment_build_number(xcodeproj: './ios/core.xcodeproj')
    commit_version_bump(message: 'chore: bump build')
    add_git_tag
    push_to_git_remote

    sync_code_signing(type: "appstore")
    build_app(scheme: "core")
    changelog_from_git_commits

    upload_to_testflight
  end

    lane :release do
      increment_version_number(xcodeproj: './ios/core.xcodeproj', bump_type: 'patch')

      increment_build_number(xcodeproj: './ios/core.xcodeproj')
      commit_version_bump(message: 'chore: bump build')
      add_git_tag
      push_to_git_remote

      get_push_certificate
      capture_screenshot    

      sync_code_signing(type: "appstore")
      build_app(scheme: "core")
      changelog_from_git_commits

      upload_to_app_store
    end
end

platform :android do

  private_lane :increment_version do
    android_set_version_name(version_name: timestamp.to_s, gradle_file: "android/app/build.gradle")
    android_set_version_code(version_code: timestamp, gradle_file: "android/app/build.gradle")
    git_commit(path: "./android/*", message: 'chore: bump android version to ' + timestamp.to_s, skip_git_hooks: true)
    push_to_git_remote
  end

  private_lane :build_aab do 
    changelog_from_git_commits
    gradle(task: 'clean', project_dir: './android/')
    gradle(task: 'bundle', build_type: 'Release', project_dir: './android/')
  end

  lane :beta do
    increment_version
    build_aab
    upload_to_play_store(track: 'beta')
  end 

  lane :prod do
    increment_version
    build_aab
    upload_to_play_store
  end

end

lane :codepush_ios do |options|
    current_version = get_version_number(xcodeproj: './ios/core.xcodeproj', target: 'core')
    codepush(current_version: current_version, manditory: options[:manditory])
end

lane :codepush_android do |options|
    current_version = google_play_track_release_names
    codepush(current_version: current_version, manditory: options[:manditory])
end

lane :codepush do |options|
    manditory = !!options[:manditory]
    manditory_string = manditory ? " -m" : ""
    version = select_app_version(current_version: options[:current_version])
    if UI.confirm("Going to CodePush #{version} to production. Feeling lucky punk?")
        Dir.chdir("..") do
            sh "appcenter codepush release-react -a core -d Production -t #{version}#{maditory_string} --output-dir ./build" do |status, result, command|
            unless status.success?
                UI.error "Command #{command} failed with status #{status.exitstatus}"
            end
            UI.message "Finished! Check out the release on App center."
        end
        end
    else
        UI.error "Not going to push"
    end
end