// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Launcher Container renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Array [
      Object {
        "backgroundColor": "hsl(0, 100%, 100%)",
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flex": 1,
          "opacity": 1,
          "padding": 12,
        }
      }
    >
      <View>
        <Text
          style={
            Array [
              Object {
                "fontSize": 14,
                "fontWeight": "300",
                "letterSpacing": 0.25,
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          arrow-left
        </Text>
      </View>
    </View>
  </View>
  <RCTScrollView
    automaticallyAdjustContentInsets={false}
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "hsl(0, 100%, 100%)",
          "flex": 1,
        },
        undefined,
      ]
    }
    contentInset={
      Object {
        "bottom": 0,
      }
    }
    enableAutomaticScroll={true}
    enableOnAndroid={false}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={0}
    getScrollResponder={[Function]}
    handleOnScroll={[Function]}
    keyboardDismissMode="interactive"
    keyboardOpeningTime={250}
    keyboardShouldPersistTaps="handled"
    keyboardSpace={0}
    onScroll={[Function]}
    resetKeyboardSpace={[Function]}
    scrollEnabled={true}
    scrollEventThrottle={1}
    scrollForExtraHeightOnAndroid={[Function]}
    scrollIntoView={[Function]}
    scrollToEnd={[Function]}
    scrollToFocusedInput={[Function]}
    scrollToPosition={[Function]}
    showsVerticalScrollIndicator={true}
    update={[Function]}
    viewIsInsideTabBar={false}
  >
    <View>
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        invertStickyHeaders={true}
        inverted={true}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "borderRadius": 4,
            "borderWidth": 1,
            "color": "hsl(211, 100%, 50%)",
            "flexDirection": "row",
            "height": 36,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 16,
          }
        }
      >
        <View
          style={
            Array [
              undefined,
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "color": "hsl(211, 100%, 50%)",
                },
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ],
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "fontSize": 14,
                  "fontWeight": "300",
                  "letterSpacing": 0.25,
                },
                undefined,
                undefined,
                undefined,
              ]
            }
          >
            check
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "backgroundColor": "yellow",
          }
        }
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "flexDirection": "row",
              "opacity": 1,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "fontSize": 14,
                  "fontWeight": "300",
                  "letterSpacing": 0.25,
                },
                undefined,
                undefined,
                Object {
                  "marginTop": 4,
                  "textTransform": "capitalize",
                },
              ]
            }
          >
            bobo
          </Text>
        </View>
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <TextInput
            allowFontScaling={true}
            blurOnSubmit={true}
            disableFullscreenUI={true}
            editable={true}
            onBlur={[Function]}
            onChangeText={[Function]}
            onFocus={[Function]}
            placeholderTextColor="hsl(208, 7%, 46%)"
            rejectResponderTermination={true}
            selectionColor="hsl(211, 100%, 50%)"
            style={
              Array [
                Object {
                  "backgroundColor": "hsl(0, 100%, 100%)",
                  "borderColor": "hsl(208, 7%, 46%)",
                  "borderRadius": 4,
                  "borderWidth": 2,
                  "marginTop": 4,
                  "padding": 8,
                  "paddingRight": 32,
                },
                Object {
                  "borderColor": "hsl(354, 70%, 54%)",
                },
                false,
                Object {
                  "fontSize": 14,
                  "fontWeight": "300",
                  "letterSpacing": 0.25,
                },
                Object {
                  "width": "100%",
                },
              ]
            }
            underlineColorAndroid="transparent"
            value=""
          />
        </View>
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "alignSelf": "flex-start",
              "backgroundColor": "transparent",
              "borderColor": "transparent",
              "borderRadius": 4,
              "borderWidth": 1,
              "color": "hsl(211, 100%, 50%)",
              "flexDirection": "row",
              "height": 20,
              "justifyContent": "flex-start",
              "margin": 4,
              "opacity": 1,
              "paddingHorizontal": 0,
            }
          }
        >
          <View
            style={
              Array [
                Object {
                  "paddingRight": 2,
                },
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "color": "hsl(211, 100%, 50%)",
                  },
                  undefined,
                  undefined,
                  Object {
                    "color": "hsl(354, 70%, 54%)",
                  },
                  undefined,
                  undefined,
                  undefined,
                ],
              ]
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "fontSize": 14,
                    "fontWeight": "300",
                    "letterSpacing": 0.25,
                  },
                  undefined,
                  undefined,
                  undefined,
                ]
              }
            >
              alert-circle
            </Text>
          </View>
          <Text
            style={
              Array [
                Object {
                  "fontSize": 14,
                  "fontWeight": "300",
                  "letterSpacing": 0.25,
                },
                Object {
                  "textAlign": "center",
                },
                undefined,
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "color": "hsl(211, 100%, 50%)",
                  },
                  undefined,
                  undefined,
                  Object {
                    "color": "hsl(354, 70%, 54%)",
                  },
                  undefined,
                  undefined,
                  undefined,
                ],
              ]
            }
          >
            rar
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</RCTSafeAreaView>
`;
