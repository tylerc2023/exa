diff --git a/node_modules/react-native-keyboard-spacer/KeyboardSpacer.js b/node_modules/react-native-keyboard-spacer/KeyboardSpacer.js
index 14560d8..8ad1597 100644
--- a/node_modules/react-native-keyboard-spacer/KeyboardSpacer.js
+++ b/node_modules/react-native-keyboard-spacer/KeyboardSpacer.js
@@ -1,23 +1,23 @@
 /**
  * Created by andrewhurst on 10/5/15.
  */
-import React, { Component } from 'react';
 import PropTypes from 'prop-types';
+import React, { Component } from 'react';
 import {
+  Dimensions,
   Keyboard,
   LayoutAnimation,
-  View,
-  Dimensions,
-  ViewPropTypes,
   Platform,
-  StyleSheet
+  StyleSheet,
+  View,
+  ViewPropTypes
 } from 'react-native';
 
 const styles = StyleSheet.create({
   container: {
+    bottom: 0,
     left: 0,
     right: 0,
-    bottom: 0,
   },
 });
 
@@ -27,19 +27,19 @@ const defaultAnimation = {
   create: {
     duration: 300,
     type: LayoutAnimation.Types.easeInEaseOut,
-    property: LayoutAnimation.Properties.opacity
+    property: LayoutAnimation.Properties.opacity,
   },
   update: {
     type: LayoutAnimation.Types.spring,
-    springDamping: 200
-  }
+    springDamping: 200,
+  },
 };
 
 export default class KeyboardSpacer extends Component {
   static propTypes = {
     topSpacing: PropTypes.number,
     onToggle: PropTypes.func,
-    style: ViewPropTypes.style,
+    style: (ViewPropTypes && ViewPropTypes.style) || PropTypes.object,
   };
 
   static defaultProps = {
@@ -51,7 +51,7 @@ export default class KeyboardSpacer extends Component {
     super(props, context);
     this.state = {
       keyboardSpace: 0,
-      isKeyboardOpened: false
+      isKeyboardOpened: false,
     };
     this._listeners = null;
     this.updateKeyboardSpace = this.updateKeyboardSpace.bind(this);
@@ -59,20 +59,22 @@ export default class KeyboardSpacer extends Component {
   }
 
   componentDidMount() {
-    const updateListener = Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillShow';
-    const resetListener = Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';
+    const updateListener =
+      Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillChangeFrame';
+    const resetListener =
+      Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';
     this._listeners = [
       Keyboard.addListener(updateListener, this.updateKeyboardSpace),
-      Keyboard.addListener(resetListener, this.resetKeyboardSpace)
+      Keyboard.addListener(resetListener, this.resetKeyboardSpace),
     ];
   }
 
   componentWillUnmount() {
-    this._listeners.forEach(listener => listener.remove());
+    this._listeners.forEach((listener) => listener.remove());
   }
 
   updateKeyboardSpace(event) {
-    if (!event.endCoordinates) {
+    if (!event.endCoordinates || this.state.isKeyboardOpened) {
       return;
     }
 
@@ -91,14 +93,20 @@ export default class KeyboardSpacer extends Component {
     // when external physical keyboard is connected
     // event.endCoordinates.height still equals virtual keyboard height
     // however only the keyboard toolbar is showing if there should be one
-    const keyboardSpace = (screenHeight - event.endCoordinates.screenY) + this.props.topSpacing;
-    this.setState({
-      keyboardSpace,
-      isKeyboardOpened: true
-    }, this.props.onToggle(true, keyboardSpace));
+    const keyboardSpace = screenHeight - event.endCoordinates.screenY;
+    this.setState(
+      {
+        keyboardSpace,
+        isKeyboardOpened: true,
+      },
+      this.props.onToggle(true, keyboardSpace),
+    );
   }
 
   resetKeyboardSpace(event) {
+    if (!this.state.isKeyboardOpened) {
+      return;
+    }
     let animationConfig = defaultAnimation;
     if (Platform.OS === 'ios') {
       animationConfig = LayoutAnimation.create(
@@ -109,14 +117,19 @@ export default class KeyboardSpacer extends Component {
     }
     LayoutAnimation.configureNext(animationConfig);
 
-    this.setState({
-      keyboardSpace: 0,
-      isKeyboardOpened: false
-    }, this.props.onToggle(false, 0));
+    this.setState(
+      {
+        keyboardSpace: 0,
+        isKeyboardOpened: false,
+      },
+      this.props.onToggle(false, 0),
+    );
   }
 
   render() {
-    return (
-      <View style={[styles.container, { height: this.state.keyboardSpace }, this.props.style]} />);
+    const {isKeyboardOpened, keyboardSpace} = this.state;
+    const {topSpacing, style} = this.props;
+    const height = keyboardSpace + (isKeyboardOpened ? topSpacing : 0);
+    return <View style={[styles.container, {height}, style]} />;
   }
 }
